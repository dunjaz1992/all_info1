''' ====== Введение в функции. Позиционные и именованные args kwargs аргументы по default. Аннотации  ===== '''

''' Аннотации  -  помогает сделать код информативным и избавиться от некоторых проблем с динамической типизацией'''

# a = 7
# b = 'hello'
# b = 3

# num : int = 9

''' Функции '''
#  Функция - именнованый блок кода, который выполняет одну задачу, может принимать в себя аргументы и возвращать результат. Можно использовать многократно вызывая по имени

# print('hello', 'hello2')

# input('hello' , 'hello2')

# def < название функции > (параметры):
#     < тело функции >

# a = 9
# b = 8
# print(a + b)

# def add(a, b):
#     # print(a + b)
#     return a + b

# a = add(34, 65)
# print(a)

# def my_len(obj):
#     count = 0
#     for element in obj:
#         count += 1
#     print(count)

# my_len('hello world')
# my_len([1, 2, 3, 4])

# Функции нужны чтобы код не повторялся и  был универсальным
# DRY - dont repeat yourself

''' return '''
# используем для возвращения результата и на этом моменте функция завершает нашу работу

# def makers():
#     return 'Makers'
#     a = 6
#     print(a) # никогда не отработает


# print(makers())


''' Параметры и Аргументы '''

# параметры --> локальные переменые внутри фнкции, значения этим переменым мы задаем при вызове функции

# Аргументы --> значения, котрые мы передаем параметрам при вызове фунуции
# print('аргумент')


''' Виды параметров '''

# 1. Обязательные параметры (object, a, b, name, last, name) --> определяет какие аргументы обязательно передавать функции. При этом нужно передавать аргументов ровно столько скольок параметров

# 2. Необязательные(парметры со значением по умолчанию а = 8)
# 2.1. с дефолтом
# 2.2. args, kwargs  -->
#      args --> попадают все неименованные аргументы, (все позиционные аргументы, которые не попали в обязательные и с дефолтом)
#            kwargs --> принимает в себя именованные аргументы (все лишние именнованые аргументы)

# args --> tuple, в котором нам приходят все аргументы которые были переданы через запятую(кроме обязательныхи дефолтом) 

# kwargs --> dict, в котром нам приходят все аргументы, которые переданы в виде ключа = значения (кроме именнованых)

''' Виды аргументов '''

# 1. Позиционные (по позиции)

# def a(c, b):
#     pass
# a('John', 'Snow')

# 2. именнованые аргументы (по названию (параметр = 2))

# def a(c, d):
#     pass
# a(c = 'John', d = 'John')

# def add(b: int, a: int = 2):
#     res = a + b
#     print(res)
# add(9, 8) - позиционные аргументы
# add(9) - дефолт
# add(a = 8, b = 12) - именованные аргументы (порядок не имеет значения)

''' * распаковка '''

# list1 = list(range(1, 11))
# print(list1)

# list1 = [*range(1,11)]
# print(list1)

# dict_ = {'a': 1, 'b': 2, 'c': 3}
# dict1 = {**dict_}
# print(dict1)


# def add(c, b, *args, **kwargs):
#     print(c + b + sum(args) + sum(kwargs.values()))

# add(3, 4)
# add(2, 3, 45, 765, 1, n = 100000, m = 214)


# def func(a, b = 5, *args, **kwargs):
#     print('a - ', a)
#     print('b - ', b)
#     print('args - ', args)
#     print('kwargs - ', kwargs)
# func(4)
# func(1, 2, 3, 4, 5)
# func(b = 50, a = 10)
# func(56, 53, [1, 2 ,3], 'makers', hello='hello')
# func(22, 11, 'hello', c = 90, n = 34, m =90)


# 5! -> 5 * 4 * 3 * 2 * 1 факториал числа

# def count_factorial(num: int) -> int:
#     fact = 1
#     for i in range(2, num + 1):
#         fact = fact * i
#     return(fact)

# print(count_factorial(4))

# def count_factorial(num: int) -> int:
#     if num == 0:
#         return 1
#     return count_factorial(num-1) * num
# print(count_factorial(6))


